# targets that are run from inside Dockers:

THISDIR:=$(shell readlink -f .)

all:
	mkdir -p build && rm -rf build/*
	#gcc -g -c -o build/mytest.o mytest.cpp
	#gcc -g -o build/mytest build/mytest.o -lzmq
	gcc -ggdb -o build/mytest mytest.cpp -lzmq
install: all
	# typical installation procedure may look like:
	#    mkdir -p $(DESTDIR)/bin/
	#    cp -afv mytest $(DESTDIR)/bin/
	# instead to meet Docker logic of shipping all binaries and dependencies, we
	# package the app binary and all its companion shared libraries:
	mkdir -p $(DESTDIR)
	lddtree -l $(THISDIR)/build/mytest | tee -a /tmp/dependency_map.txt
#	echo /usr/lib/debug/.build-id >>/tmp/dependency_map.txt
#	tar --dereference -c -v -z --absolute-names --files-from=/tmp/dependency_map.txt -f $(DESTDIR)/mytest.tar.gz
#	tar -c $(DESTDIR)/mytest2.tar.gz /usr/lib/debug/.build-id
#	tar  --dereference -v -c -z -f $(DESTDIR)/mytest-debug.tar.gz /usr/lib/debug/.build-id

	tar --dereference -c -v -z --absolute-names --files-from=/tmp/dependency_map.txt -f $(DESTDIR)/mytest.tar.gz
	#tar -c -f $(DESTDIR)/mytest.tar.gz /usr/lib/debug/.build-id
